안드로이드 강의

2019/4/13 일 1일차

trello.com

조경진
1988년생

학력
서울시립대 - 전자전기(컴퓨터)
서울시립대 - 동과 석사(데이터베이스)

연락처
메일 : cho881020@gmail.com
전화번호 : 010-5112-3237

강의소개
안드로이드 - 기초(입문)
선행 과정 => JAVA 기초 문법 + 객체지향 (String str = "Hello", str.equals("비교");

강의 목적
안드로이드 기초 -> 외주 개발 형태에 적합한 기능들 우선 => 외주 프로젝트 보조 투입(2~3명 정도.) => iOS

강의 목표
5주 => 실무 투입(교육 Vs. 실무 Gap)
1) 디자인을 보고 => 화면을 그리는것.
2) 간단한 이벤트 처리 + 데이터를 화면에 출력
 - 이벤트처리 : 닫기 버튼을 누르면 화면이 닫히게 코딩한다.
 - 데이터출력 : cho881020 => 로그인 => 이름을 조경진으로 출력.
3) 안드로이드에서 제공하는 편의 기능.
4) 외부 라이브러리 연동 방법.
  -> 직접 만들기에는 너무 큰 기능을 남이 만든 코드로 대체.
5) 서버에서 데이터를 받아서 앱에서 출력.

간단한 외주 프로젝트 보조 인력 양성.

ideal idea lab
https://lab.idealidea.co.kr/


=============================================================================================================================================================================================
1. 안드로이드 시작하기
  1.1 개발환경 구성
	 - 내 컴퓨터로 안드로이드 앱을 개발할 수 있게 해주는 프로그램을 설치.
	 - 구성 요소
	   1) JDK - Java Development (자바 개발 도구)
	    - 윈도우에는 기본적으로 자바가 깔려있지 않다. 추가 설치 필요

		- 구글 : JDK 검색 = > SE Development 8 접속 = > 다운로드 => 설치 (언어 : 포틀린, 자바)
		  -- 설치가 잘되었는지 확인하는 방법 : 시작 -> cmd ->   java -version    : javac 1.8.0_222
																javac -version    : javac 1.8.0_222
=============================================================================================================================================================================================

		- 구글 : 안드로이드 스튜디오

		설치 프로그램 실행
		- 설치 과정
		 1. Android Virtual Device(AVD) -> 컴퓨터로 안드로이드 폰을 에뮬레이팅.
		 2. Android Studio 프로그램
		 3. import Setting : 예전에 내가 쓰던 설정이 있으면 가져오기.
		 4. 테마 : 밝은 화면 / 어두운 화면 => 취향존중
		 5.



=============================================================================================================================================================================================


		https://www.draw.io/  그림그리는 툴

		wanted 사람 구하는 앱(스타트업)



  2. 소규모 프로젝트의 구조
    - 프로젝트를 진행함에 있어 이 강의를 들으시는 여러분이 수행하게 될 역할
	-

=============================================================================================================================================================================================
협업 사용 도구 (Git)
 1. 개요
   - 작성된 코드의 버전관리 (형상 관리) 를 도와주는 도구
   - 이 도구의 기능을 잘 배우면 협업에 아주 편리하게 사용 가능.

2. 위상
  - 개발 회사에서 Git을 안쓴다? 걸러도 된다. Vs SVN (뇌피셜)

3. 설치
  - 구글 : Git install( 윈도우 기준)
  - 맥의 경우 설치 방법을 따로 검색해서 진행.
	다운받은 파일 NEXT 해서 설치하자.
  - 설치 확인 : 시작 => git => git.exe(git bash) 나오는지?

=============================================================================================================================================================================================
4. GitHub
	4.1 개요
	- Git으로 관리되는 코드/작업내역을 보관해주는 웹페이지.
	- 작성한 코드를 인터넷에 업로드 해줄 수 있게 해줌.

	4.2 주소 : github.com     회원가입하기


	4.3 안드로이드 스튜디오와 깃허브 연동(최초 1회만 하면 되는 과정)
	 - File => Settings => Git 검색 => GitHub, Git
	 - 우선 Git이 안드로이드 스튜디오와 잘 연결되어있는지 확인.
	 = Git 메뉴 선택 =>  Test 선택 클릭 = > Git 버전이 정상적으로 출력되는지?
		깃허브 계정등록 : Github 메뉴 선택 => Add account = > 로그인 = > OK

	4.4. 프로젝트 최초 업로드 )프로젝트를 만들고 1회만 하면 되는 과정)
		VCS - > import into version control => Share porject on github 클릭
		- 기본값 확인 => private 체크박스


=============================================================================================================================================================================================



	stackoverflow 지식인()





=============================================================================================================================================================================================
컴퓨터의 구조(프로그래머의 입장에서)
 구성 요소
	CPU			=> 모든 연산을 담당. 측정단위는 3.2GHz => 초당 연산 횟수
	RAM         => 코드로 작성하는 데이터들을 늘어놓을 수 있는 공간.  다다익램 ( 16GB)
			* 휘발성 메모리 => 전원이 차단되면 기록된 데이터가 모두 날아감
	SSD			=>  보조 기억장치. 책장처럼 데이터를 보존하는 공간.
			(반) 영구적으로 보존해야 하는 데이터를 모아두는 공간.
	SSD VS HDD 차이 ?  데이터를 찾을 때 기계적(물릭적) HDD => 전자식 SSD



	메인보드

	HDD
	VGA (그래픽카드)
	+ 파워케이스 / 키보드 마우스


=============================================================================================================================================================================================

첫번째 안드로이드 프로그램
	1. 개요
	 - 새 프로젝트를 만들고, 이 프로젝트를 Github에 업로드 !

	2. 설명
	  - Start a new android projectg 클릭
	  - 프로젝트 생성 매니저 팝업 출현.
	  - Device : Phone and Tablet :
	  - Empty Activity 선택
	  - 프로젝트 정보를 입력
	  - Name : 앱의 이름. 영어로 작성 => 플레이스토어 링크 주소로 반영됨.
	  - Package Name : 프로젝트 고유 ID 링크 주소에 그대로 박제 => 다른 사람이 쓰고 있는(중복된)패키지 이름은 스토어에 등록 불가
	  - 짓는요령 : 회사인터넷주소를 반대순서로 적고, 마지막에 앱 이름 붙임.
	   naver.com => com.naver
	   save.location = > 프로젝트 파일 저장 경로
	   Language : 개발 하는데 사용할 언어 => 교육과정상 JAVA로 진행함에
	   Vs. Kotilin : 향후에는 코틀린이 대세가 되지 않을까. (구글로 인해서)
	   Minimum API Level : 15 Level 거의 모든 100%,  이슈가 생기면 조금씩 올라감. (다른 라이브러리 지원때메)
	    * 나중에 값을 바꿀수 있음. 처음에는 낮게 출발 => 필요에 따라 올림.


	만약 프로젝트 생성이 실패했다면.


1. 좌측 : Package Exploer
		프로젝트를 구성하는 파일들을 모아둔 탐색기.
		app -> java. res
		java : 그려진 화면을 우리가 원하는대로 "동작: 코드를 작성.
		res  : 앱의 화면등을 구성하는 시각자료.(추가 자료) 모아두는 폴더
		 - 화면 : layout을 그린다.
		 - 그림 : drawble 폴더에 모아둠.
		 - mipmap : 앱의 실행 아이콘 표기
		 - values : 앱에서 자주 사용하는 색(colors.xml) 문구(strings.xml) 등의 자료를 저장.


2. 우측 : Code Editor
	- 프로젝트에 작성하는 코드를 편집하는 공간
	- xml 파일을 편집할때는 이게 어떻게 표기되는지? 미리 알면 편함. preview


3. 하단 : Logcat을 주로 사용
    Log : 행동 내역을 기록해서 체크하는

	넥서스 5.X


git의 기초활용
1. commit()	    ctrl + k
	- 변경된 내역을 확정짓는다.
	-

2. push()

=============================================================================================================================================================================================
안드로이드 앱의 구성요소
1. 개요	- 안드로이드 시스템을 구성하는 4가지 큰 요소
- 종류
		activty : 하나하나의 화면 들(눈에 보이는 영역. 강의의 Main)
		content provide : 필용한 '데이터'들을 저장/불러올때 사용(sub)
		service : 앱이 실행되지 않은 상태(백그라운드) 에서 동작되는 일들을 처리
		broadcast receiver - 스마트폰 기기 자체나 다른 앱에서 어떤일이 발생했다고 '방송' 을 하면 그걸 받아서 대응.
		후후콜 : 전화가 오면 => 스팸인지 아닌지 찾아서 알려줌.
		가계부 : 문자가 날아오면 => 자동으로 지출로 기록.

=============================================================================================================================================================================================
activty
	1. 개요
		하나의 화면을 구성하는 메인 객체. (화면 한장 : 1개의 액티비티)
	2. 구성요소
		layout XML 파일<연결> - JAVA 파일
	3. 사용요령
		1) 하나의 액티비티에 화면이 어떻게 보여져야할지 구조를 그림(layout.xml)
		2) 그려진 화면을 동작시키는 코드 작성. (java)


LinearLayout
		1. 개요
		-layout : 화면에 들어갈 내용들을 담아주는 그릇.
		-linear : 선형의 => 일렬로 줄줄이 배치

		2. 사용법
		-active의 xml을 열어보자

		- ConstraintLayout 지우고 LinearLayout으로 교체

		<LinearLayout 자동완성 = 여는 태그>
			# 그릇에 담긴 내용
		</LinearLayout = 닫는 태그>

		3. 주요 속성
			- 속성 ? 화면의 모든 구성요소는

			layout_width => 가로길이
			layout_height => 세로길이
			=> 모든 구성요소 필수값
			orientation : 내부의 내용들을 가로로 배치할지 세로로 배치할지 결정.





		<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"

		------------>

		<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"

=============================================================================================================================================================================================

TextView
1. 개요
	사용자에게 글자를 보여주고 싶을때
	- 사용자가 수정할 수 없는 글자를 보여주고 싶을때

	제플린-- 그림 그린거 도와준거

0. 여기서부터는 컴포넌트 들의 리스트임 (TextView, EditText 등등)
 => 화면을 실질적으로 구성하는 내용물!(컴포넌트 Component)

1. 개요

2. 사용법
  - 레이아웃 여는태그와 닫는 태그 사이에 내용물로서 적어줌.
  - <TextView 자동완성 (Ctrl + Space) /> 닫는 태그가 별도로 없다


암호화----
DES  AES(Advanced )

EC2, S3 => Simple Storage Service, RDS


3. 주요 속성
1) 공통 필수 속성. width, height
2) 보여질 문구 : text
3) 글씨의 크기를 바꾸고 싶다 : textSize
4) 글씨의 색상을 바꾸고 싶다 : textColor
	* 색상은 #RGB값으로 입력, 빛의 삼원색(RED, GRENN, BLUE)가 각각 얼마의 값으로 들어갈건지
5) EX: 빨간색 #FF0000
6) 기울임/ 두껍게 표시 : textStyle => bold/italic 선택
 ==> | 기호를 이용해서 여러개의 값을 동시에 지정 가능

7) 기타 속성
   1) textScaleX : 장평(글자의 가로 길이)
   2) lines : 몇줄 치의 공간을 차지하게 할지
   3) maxLines : 최대 몇줄 까지만 허용할건지.

=============================================================================================================================================================================================
1. EditText
  - 사용자에게 글자 /숫자를 입력받고자 할때 사용법
2. 사용법
 <EditText 자동완성 />

3. 주요속성
 - TextView가 할 수 있는건 EditText도 거의 다 가능. (text, textColor 등등)
 - 사용자에게 어떤 값을 입력하면 되는지 안내 : hint
 - 힌트의 색상을 바꾸고 싶다 : textColorHint
 - 키보드를 상황에 맞게 바꿔주자(포넌 : 전화키패드) : inputType
 - 줄바꿈 기능을 삭제(한줄로 강제) singleLine = True
 - 엔터키의 기능을 바꾸고 싶다.(Ex 검색) : imeOptions


ImageView
1. 개요 - 그림파일을 사용자에게 보여주고 싶을때 사용.

2. 사용법 - 앱에서 사용하고자 하는 그림 파일을 drawble 폴더에 추가 작업 필요.
   구글 ex. 더조은 컴퓨터 로고 다운

   그림파일 추가 방법을
   1) png(투명 배경 가능) or jpg (투명 표현 불가) 파일을 사용.
   2) 파일명을 변경해야함. 영어소문자(대문자 X), 숫자로만 파일 이름을 구성해야함.
   => tje_it_logo01.png
   3) 해당파일을 복사. ctrl+ C -> 안드로이드 스튜디오 drawble에 붙여넣기

   자주 사용하는 속성
   src : 어떤 이미지를 표시할지 결정
    scaleType  : 이미지 파일과 이미지뷰의 모양이 다를 때 어떻게 처리할지 방침. 결정 : 보통 centerCorp 처리


Button

1. 개요
 - 사용자에게 "터치 이벤트" 를 받아내려고 할때 사용법
 - 사용자에게 행동 의사 결정 표시를 받는 용도.

2. 사용법


Switch










 <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="30dp">

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="하이루"
            android:background="@color/colorPrimary"
            />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="테스트"
            />
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="25dp"
            android:text="테스트"
            android:textStyle="italic|bold"
            android:textScaleX="0.5"
            android:textColor="#FF0000"

            />
    </LinearLayout>
    <!-- Ctrk + Space : 자동완성 목록 소환 -->

    <TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="안녕하세요!"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintLeft_toLeftOf="parent"
    app:layout_constraintRight_toRightOf="parent"
    app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="안녕하세요!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="안녕하세요!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />


    <ImageView
        android:layout_width="150dp"
        android:layout_height="150dp"
        android:src="@drawable/the_it_logo"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="User ID"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:singleLine="true"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="전화번호"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="phone"
        />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="비밀번호"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="textPassword"
        android:imeOptions="actionGo"
        />
    <EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="textPassword"
        />

    <RadioGroup
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        >

        <RadioButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="남성"
            />
        <RadioButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="여성"
            />


    </RadioGroup>

    <CheckBox
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="이용 약관에 동의합니다."
        />

    <ToggleButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOff="미작동"
        android:textOn="작동중"
        />

    <Switch
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="푸시알림 설정"
        />

    <!--  Shift + F10 : 실행 단축키  -->

    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="회원가입"/>


공통 속성(디자인 초안 반영용)
1. 기본 사항
 - layout_width, layout_height 일단 반드시 작성해야함
=> match_parent, wrap_content 택일 or 특정숫자 dp값으로 대체(이미지뷰)

 match_parent : 나를 감싸는 부모의 크기를 물려받자!(꽉 채우자!)
 => 나를 감싸는 ? 컴포넌트(레이아웃)에서 제일 가까운 layout
  * 최상위 layout의 부모는 핸드폰 스크린 사이즈 => match_parent : 꽉 채워놓고 조절하자!!

  wrap_content : 내가 가진 내용물 (Layout - 컴포넌트, 컴포넌트 - text 등의 실제 내용물)의 크기 만큼만. 필요한 만큼만 사용.
   예) 글자 적힌 만큼만 활용하겠다.


2. 배치 조절
	1) gravity : 레이아웃/컴포넌트가 내용물을 어느 쪽으로 몰아줄지.
		기본값 : 좌상단으로  쏠리게 되어있음.
	=> ex) 콤포넌트를 오른쪽으로 보내고 싶다 : 컴포넌트의 부모 레이아웃의 gravity를 right로 설정..
	ex: textview의 글씨를 오른쪽으로 보내고싶다 : 해당 textview의 gravity를 right로 설정. 가로 크기가 wrap_content이면 아무 변화도 없을 것.

  2) margin (바깥 여백, 이전 요소와의 간격) , padding (내부간격)
     padding은 margin을 일괄적으로 처리할 수 있을 것 같을때 사용하면 편리함.


   3) weigh - layout 안에서 각각의 컴포넌트들이 차지하는 공간의 비율 설정이
   - 사용법
     - 어느 방향으로 나눠 가질지(가로/세로 택일)
	 2) ex 가로 : 컴포넌트를 감싸는 layout 을 가로 배치로 생성이
	 3) 각각의 컴포넌트의 가로(세로 분배 상황이면 세로) 를 0dp로 설정
	 4) 0dp로 설정된 컴포넌트들에게 weight 속성을 추가. 차지 비율을 값으로.


4) visibility 각가의 요소들이 안보이게(숨기려고 할때) 사용
  - gone - 아예 흔적도 없이 사라지게 함
  - invisibile => 눈에 보이진 않지만 자리는 계속 차지함
  - visibile => 정상적으로 눈에 보이게


5. enabled : 해당 컴포넌트의 기능을 비활성화
  - enabled = false : 해당 기능을 비활성화













